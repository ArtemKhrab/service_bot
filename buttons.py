from telebot import types

import methods

stickers = {'–ë—Ä–æ–≤–∏, –≤—ñ—ó': 'üëÅ', '–ù—ñ–≥—Ç—å–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å': 'üíÖüèª',
            '–ü–µ—Ä—É–∫–∞—Ä—Å—å–∫—ñ –ø–æ—Å–ª—É–≥–∏': '‚úÇ', '–í–∏–¥—ñ–ª–∏—Ç–∏ –≤—ñ–ª—å–Ω–∏–π —á–∞—Å': 'üíÉ'}
service_eyes = ['–ö–æ—Ä–µ–∫—Ü—ñ—è –±—Ä—ñ–≤', '–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤',
                '–§–∞—Ä–±—É–≤–∞–Ω–Ω—è –≤—ñ–π', '–ù–∞—Ä–æ—â—É–≤–∞–Ω–Ω—è –≤—ñ–π',
                '–ó–∞–≤–∏–≤–∫–∞ –≤—ñ–π', '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π',
                '–ë–æ—Ç–æ–∫—Å –≤—ñ–π', '–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤',
                '–ù–∞—Ä–æ—â—É–≤–∞–Ω–Ω—è –±—Ä—ñ–≤']

service_haircut = []

service_nails = []

days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥']


def back_and_delete():
    return types.InlineKeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data=f'del_message')


def to_menu():
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–ú–µ–Ω—é",
                                                 callback_data='menu')
    keyboard.add(callback_button)
    return keyboard


def choose_role_button_menu():
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–ú–µ–Ω—é",
                                                 callback_data='choose role menu')
    keyboard.add(callback_button)
    return keyboard


def choose_role_button_reg():
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="üìù –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å",
                                                 callback_data='choose role reg')
    keyboard.add(callback_button)
    return keyboard


def choose_role_menu():
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="üíáüèª‚Äç‚ôÇÔ∏è –ö–ª—ñ—î–Ω—Ç",
                                                 callback_data='change_role 0')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üíÖüèª –ú–∞–π—Å—Ç–µ—Ä",
                                                 callback_data='change_role 1')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üîÑ –ù–∞–∑–∞–¥",
                                                 callback_data='del_message')
    keyboard.add(callback_button)
    return keyboard


def choose_role_reg():
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="üíáüèª‚Äç‚ôÇÔ∏è –ö–ª—ñ—î–Ω—Ç",
                                                 callback_data='registration client')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üíÖüèª –ú–∞–π—Å—Ç–µ—Ä",
                                                 callback_data='registration master')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="üîÑ –ù–∞–∑–∞–¥",
                                                 callback_data='del_message')
    keyboard.add(callback_button)
    return keyboard


def back():
    return types.InlineKeyboardButton(text="–î–∞–ª—ñ",
                                      callback_data='add_service')


def choose_language_buttons():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    ua_button = types.InlineKeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
                                           callback_data='language UA')
    # uk_button = types.InlineKeyboardButton(text="üá¨üáß English",
    #                                       callback_data='language UK')
    # keyboard.add(ua_button, uk_button)
    keyboard.add(ua_button)
    return keyboard


def client_menu(role):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É",
                                                 callback_data=f'order_1 {role}')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–£–ª—é–±–ª–µ–Ω—ñ –º–∞–π—Å—Ç—Ä–∏",
                                                 callback_data='saved_masters')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å",
                                                 callback_data='check_profile')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ú–æ—ó –∑–∞–ø–∏—Å–∏",
                                                 callback_data='pre_check_order')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å",
                                                 callback_data='choose role menu')
    keyboard.add(callback_button)
    return keyboard


def client_check_order_buttons():
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–£ –ø—Ä–æ—Ü–µ—Å—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
                                                 callback_data='check_order_client 0')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                                                 callback_data='check_order_client 1')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å",
                                                 callback_data='del_message')
    keyboard.add(callback_button)
    return keyboard


def master_menu_1(user_id):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–ó–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏ —á–∞—Å",
                                                 callback_data=f'check_services {user_id} reservation')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —á–µ—Ä–≥—É",
                                                 callback_data='check_order_master 0')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –º–æ—ó —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏",
                                                 callback_data='check_certificates' + ' ' + str(user_id))
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –º–æ—ó —Ä–æ–±–æ—Ç–∏",
                                                 callback_data='check_sample_services' + ' ' + str(user_id))
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –º–æ—ó –ø–æ—Å–ª—É–≥–∏",
                                                 callback_data='check_services' + ' ' + str(user_id))
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å",
                                                 callback_data='check_profile')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–î–∞–ª—ñ ‚û°",
                                                 callback_data='menu_2')
    keyboard.add(callback_button)
    return keyboard


def master_menu_2():
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ä–æ–±–æ—á–∏–π —á–∞—Å",
                                                 callback_data='set_working_days show')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ —Å–≤–æ—ó —Ä–æ–±–æ—Ç–∏",
                                                 callback_data='add_sample_service')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç",
                                                 callback_data='add_media')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –ø–æ—Å–ª—É–≥—É",
                                                 callback_data='add_service')
    keyboard.add(callback_button)

    callback_button = types.InlineKeyboardButton(text="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –≤–∏–∫–æ–Ω–∞–Ω—ñ –ø–æ—Å–ª—É–≥–∏",
                                                 callback_data='check_order_master 1')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å",
                                                 callback_data='choose role menu')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨Ö",
                                                 callback_data='menu_1')
    keyboard.add(callback_button)
    return keyboard


def service_segments(master_id, add, res=None):
    segments = methods.get_service_segments()
    keyboard = types.InlineKeyboardMarkup()

    if add:
        for segment in segments:
            callback_button = types.InlineKeyboardButton(text=stickers[segment.name] + ' ' + str(segment.name),
                                                         callback_data='service_segment ' + str(segment.id) + ' '
                                                                       + str(master_id))

            if str(segment.name) != '–í–∏–¥—ñ–ª–∏—Ç–∏ –≤—ñ–ª—å–Ω–∏–π —á–∞—Å':
                keyboard.add(callback_button)

    else:
        for segment in segments:
            callback_button = types.InlineKeyboardButton(text=stickers[segment.name] + ' ' + str(segment.name),
                                                         callback_data='order_service ' + str(segment.id) + ' '
                                                                       + str(master_id) + ' ' +
                                                                       (res if res == 'reservation' else 'N'))

            if (str(segment.name) != '–í–∏–¥—ñ–ª–∏—Ç–∏ –≤—ñ–ª—å–Ω–∏–π —á–∞—Å') or \
                    (str(segment.name) == '–í–∏–¥—ñ–ª–∏—Ç–∏ –≤—ñ–ª—å–Ω–∏–π —á–∞—Å' and res is not None):
                keyboard.add(callback_button)

    callback_button = back_and_delete()
    keyboard.add(callback_button)
    return keyboard


def city_buttons(role, reg):
    cities = methods.get_cities()
    keyboard = types.InlineKeyboardMarkup()
    for city in cities:
        callback_button = types.InlineKeyboardButton(text=city.name,
                                                     callback_data='set_city ' + str(city.id) + ' ' + str(role) +
                                                                   ' ' + reg)
        keyboard.add(callback_button)
    return keyboard


def set_placement_buttons(city_id, reg):
    placements = methods.get_placements(city_id)
    text = '–û–±–µ—Ä—ñ—Ç—å —Ü–∏—Ñ—Ä—É, –¥–µ –í–∏ –ø—Ä–∞—Ü—é—î—Ç–µüíÅüèº‚Äç‚ôÄÔ∏è: \n'
    keyboard = types.InlineKeyboardMarkup(row_width=4)
    counter = 1
    for place in placements:
        text += str(counter) + '. ' + place.name + ' ' + str(place.address) + '\n'
        callback_button = types.InlineKeyboardButton(text=counter,
                                                     callback_data='set_placement ' + str(place.id) + ' ' + reg)
        counter += 1
        keyboard.add(callback_button)
    return [text, keyboard]


def master_back():
    return types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                      callback_data='menu_1')


def send_contact():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True))
    return markup


def del_button():
    return types.ReplyKeyboardRemove()


def edit_profile(role):
    return types.InlineKeyboardButton(text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
                                      callback_data=f'edit_profile {role}')


def moving_certificates_buttons(index, end_index, data_id, master_id, user_id):
    keyboard = types.InlineKeyboardMarkup()

    if str(user_id) == str(master_id):
        callback_button = types.InlineKeyboardButton(text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
                                                     callback_data='edit_certificate ' + str(data_id))
        keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ú–µ–Ω—é",
                                                 callback_data='menu')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å",
                                                 callback_data='del_message')
    keyboard.add(callback_button)

    if int(index) < int(end_index):
        callback_button = types.InlineKeyboardButton(text="–î–∞–ª—ñ",
                                                     callback_data='move_certificate ' + str(int(index) + 1) +
                                                                   ' ' + str(end_index) + ' ' + str(master_id))
        keyboard.add(callback_button)

    if int(index) > 0:
        callback_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                     callback_data='move_certificate ' + str(int(index) - 1) +
                                                                   ' ' + str(end_index) + ' ' + str(master_id))
        keyboard.add(callback_button)
    return keyboard


def moving_services_buttons(index, end_index, data_id, master_id, user_id):
    keyboard = types.InlineKeyboardMarkup()

    if str(user_id) == str(master_id):
        callback_button = types.InlineKeyboardButton(text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
                                                     callback_data='edit_sample_services ' + str(data_id))
        keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ú–µ–Ω—é",
                                                 callback_data='menu')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text=" –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å",
                                                 callback_data='del_message')
    keyboard.add(callback_button)

    if int(index) < int(end_index):
        callback_button = types.InlineKeyboardButton(text="–î–∞–ª—ñ",
                                                     callback_data='move_services ' + str(int(index) + 1) +
                                                                   ' ' + str(end_index) + ' ' + str(master_id))
        keyboard.add(callback_button)

    if int(index) > 0:
        callback_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                     callback_data='move_services ' + str(int(index) - 1) +
                                                                   ' ' + str(end_index) + ' ' + str(master_id))
        keyboard.add(callback_button)

    return keyboard


def edit_sample_service_buttons(service_id, user_id):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É",
                                                 callback_data='edit_sample_serv_name ' + str(service_id))
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ",
                                                 callback_data='edit_sample_serv_photo ' + str(service_id))
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏",
                                                 callback_data='del_sample_service ' + str(service_id))
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='to_master_menu')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–í–∏–π—Ç–∏",
                                                 callback_data='check_sample_services ' + str(user_id))
    keyboard.add(callback_button)
    return keyboard


def edit_certificate_buttons(certificate_id, user_id):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ –æ–ø–∏—Å",
                                                 callback_data='edit_cer_description ' + str(certificate_id))
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ",
                                                 callback_data='edit_cer_photo ' + str(certificate_id))
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏",
                                                 callback_data='del_cer ' + str(certificate_id))
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='to_master_menu')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–í–∏–π—Ç–∏",
                                                 callback_data='check_certificates ' + str(user_id))
    keyboard.add(callback_button)
    return keyboard


# def date_buttons():
#     keyboard = types.InlineKeyboardMarkup(row_width=3)
#
#     for i in range(0, 9, 3):
#         date_creation_1 = datetime.date.today() + datetime.timedelta(days=i)
#         date_creation_1 = date_creation_1.strftime("%y.%m.%d")
#         callback_button_1 = types.InlineKeyboardButton(text=str(date_creation_1),
#                                                        callback_data='date_create ' + str(date_creation_1))
#         date_creation_2 = datetime.date.today() + datetime.timedelta(days=i + 1)
#         date_creation_2 = date_creation_2.strftime("%y.%m.%d")
#         callback_button_2 = types.InlineKeyboardButton(text=str(date_creation_2),
#                                                        callback_data='date_create ' + str(date_creation_2))
#         date_creation_3 = datetime.date.today() + datetime.timedelta(days=i + 2)
#         date_creation_3 = date_creation_3.strftime("%y.%m.%d")
#         callback_button_3 = types.InlineKeyboardButton(text=str(date_creation_3),
#                                                        callback_data='date_create ' + str(date_creation_3))
#         keyboard.add(callback_button_1, callback_button_2, callback_button_3)
#
#     keyboard.add(back_and_delete())
#     return keyboard


def order_placement_buttons(city_id):
    placements = methods.get_placements(city_id)
    text = '–°–∞–ª–æ–Ω–∏: \n'
    keyboard = types.InlineKeyboardMarkup(row_width=4)
    counter = 1
    buttons = []

    for place in placements:
        text += str(counter) + '. ' + place.name + ' ' + str(place.address) + '\n'
        callback_button = types.InlineKeyboardButton(text=counter,
                                                     callback_data='order_placement ' + str(place.id))
        counter += 1
        buttons.append(callback_button)

    keyboard.add(*buttons)
    return [text, keyboard, placements]


def send_location():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≥–µ–æ–ø–æ–∑–∏—Ü—ñ—é', request_location=True))
    return markup


def moving_masters_buttons(index, end_index, master_id, placement_id, user_id):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ä–æ–±–æ—Ç–∏",
                                                 callback_data='check_sample_services' + ' ' + str(master_id))
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏",
                                                 callback_data='check_certificates' + ' ' + str(master_id))
    keyboard.add(callback_button)
    if str(master_id) != str(user_id):
        callback_button = types.InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö",
                                                     callback_data='add_to_favorite' + ' ' + str(master_id))
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏ –ø–æ—Å–ª—É–≥—É",
                                                     callback_data='check_services' + ' ' + str(master_id))
        keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ú–µ–Ω—é",
                                                 callback_data='menu')
    keyboard.add(callback_button)

    if int(index) < int(end_index):
        callback_button = types.InlineKeyboardButton(text="–î–∞–ª—ñ",
                                                     callback_data='move_masters ' + str(int(index) + 1) +
                                                                   ' ' + str(end_index) +
                                                                   ' ' + str(placement_id))
        keyboard.add(callback_button)

    if int(index) > 0:
        callback_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                     callback_data='move_masters ' + str(int(index) - 1) +
                                                                   ' ' + str(end_index) +
                                                                   ' ' + str(placement_id))
        keyboard.add(callback_button)

    return keyboard


# def time_slots_buttons(master_id, user_id, service_id):
#     time_slots = methods.get_time_slots(master_id)
#     if time_slots.__len__() == 0:
#         return None
#     text = '–í—ñ–ª—å–Ω—ñ —Ç–∞–π–º —Å–ª–æ—Ç–∏: \n'
#     keyboard = types.InlineKeyboardMarkup(row_width=4)
#     keyboard.add(types.InlineKeyboardButton(text="‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å",
#                                             callback_data='del_message 1'))
#     counter = 1
#     buttons = []
#     for slot in time_slots:
#         text += str(counter) + '. –ü–æ—á–∏–Ω–∞—é—á–∏ –∑: ' + str(slot.start_time) + ' –¥–æ: ' + str(slot.end_time) + \
#                 '. –î–∞—Ç–∞: ' + str(slot.date) + '\n'
#         callback_button = types.InlineKeyboardButton(text=counter,
#                                                      callback_data='order_time_slot ' + str(slot.id)
#                                                                    + ' ' + str(service_id) + ' ' + str(master_id))
#         counter += 1
#         buttons.append(callback_button)
#     if str(user_id) != str(master_id):
#         keyboard.add(*buttons)
#     else:
#         keyboard.add(master_back())
#     return [text, keyboard]


def saved_masters(user_id):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    masters = methods.get_saved_masters(user_id)

    if masters.__len__() < 1:
        return None

    for master in masters:
        user = methods.get_master(master.master_id)
        callback_button = types.InlineKeyboardButton(text=user[0].name,
                                                     callback_data='sav_masters' + ' ' + str(user[0].user_id))
        keyboard.add(callback_button)

    return keyboard


def get_services(master_id, user_id, segment, reservation):
    services = methods.get_services(master_id, segment)

    if services.__len__() < 1:
        return None

    text = ''
    counter = 1
    keyboard = types.InlineKeyboardMarkup()

    if str(master_id) == str(user_id) and reservation != 'reservation':
        for service in services:
            money = service.money_cost + '‚Ç¥' if service.money_cost is not None else '–Ω–µ –∑–∞–¥–∞–Ω–æ'
            time = service.time_cost if service.time_cost is not None else '–Ω–µ –∑–∞–¥–∞–Ω–æ'
            try:
                text += str(counter) + '. ' + service.name + ' –¶—ñ–Ω–∞: ' + money + \
                        ', –ß–∞—Å –≤—ã–∫–æ–Ω–∞–Ω–Ω—è: ' + time + '\n'
            except TypeError as tp:
                print(tp)
            counter += 1
        keyboard.add(types.InlineKeyboardButton(text='–†–µ–¥–∞–≥—É–≤–∞—Ç–∏',
                                                callback_data='edit_service ' + segment),
                     types.InlineKeyboardButton(text="‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å",
                                                callback_data='del_message'))
    else:
        if segment == '4':
            pass  # add empty time slot
        text = '–î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ—Å–ª—É–≥–∏'

        for service in services:
            callback_button = types.InlineKeyboardButton(text=service.name,
                                                         callback_data='choose_service '
                                                                       + str(master_id) + ' ' + str(service.id)
                                                                       + ' not_confirmed')
            keyboard.add(callback_button)

        callback_button = types.InlineKeyboardButton(text="‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å",
                                                     callback_data='del_message')
        keyboard.add(callback_button)

    return [text, keyboard]


def edit_service(user_id, segment):
    services = methods.get_services(user_id, segment)

    if services.__len__() < 1:
        return None
    keyboard = types.InlineKeyboardMarkup()
    for service in services:
        callback_button = types.InlineKeyboardButton(text=service.name,
                                                     callback_data='update_service ' + str(service.id) + ' '
                                                                   + str(segment))
        keyboard.add(callback_button)
    return keyboard


def edit_service_buttons(service_id, segment, user_id):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text='–ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É',
                                                 callback_data='update_price ' + str(service_id) + ' ' +
                                                               str(segment))
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text='–ó–º—ñ–Ω–∏—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å',
                                                 callback_data='update_time_cost ' + str(service_id) + ' ' +
                                                               str(segment))
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text='–í–∏–¥–∞–ª–∏—Ç–∏',
                                                 callback_data='delete_service ' + str(service_id) + ' ' + str(segment))
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='to_master_menu')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text='–í–∏–π—Ç–∏', callback_data='check_services ' + str(user_id))
    keyboard.add(callback_button)
    return keyboard


def feedback_button(master_id):
    return types.InlineKeyboardButton(text="–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫",
                                      callback_data='send_feedback ' + str(master_id))


def rating_button(master_id):
    return types.InlineKeyboardButton(text="–û—Ü—ñ–Ω–∏—Ç–∏ –º–∞–π—Å—Ç—Ä–∞",
                                      callback_data='send_rating ' + str(master_id))


def set_rating_buttons(master_id):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(text='1', callback_data='set_rating 1 ' + str(master_id)),
        types.InlineKeyboardButton(text='2', callback_data='set_rating 2 ' + str(master_id)),
        types.InlineKeyboardButton(text='3', callback_data='set_rating 3 ' + str(master_id)),
        types.InlineKeyboardButton(text='4', callback_data='set_rating 4 ' + str(master_id)),
        types.InlineKeyboardButton(text='5', callback_data='set_rating 5 ' + str(master_id)))
    return keyboard


def mark_as_done(order_id):
    return types.InlineKeyboardButton(text="–í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ",
                                      callback_data='mark_as_done ' + str(order_id))


def empty_template():
    return types.InlineKeyboardMarkup()


def service_buttons(segment, services_name):
    keyboard = types.InlineKeyboardMarkup()
    data = [item[0] for item in services_name]

    if segment == '1':
        service = service_eyes

    elif segment == '2':
        service = service_nails

    elif segment == '3':
        service = service_haircut

    else:
        service = []

    for service_name in service:

        if service_name not in data:
            callback_button = types.InlineKeyboardButton(text=service_name,
                                                         callback_data=f'add_instance {service_name}'
                                                                       + ' ' + str(segment))
            keyboard.add(callback_button)

    return keyboard


def add_more_button(segment):
    return types.InlineKeyboardButton(text='üÜï –î–æ–¥–∞—Ç–∏ —â–µ', callback_data='service_segment ' + str(segment))


def edit_profile_buttons(role):
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–Ü–º'—è",
                                                 callback_data=f'profile_edit name {role}')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω",
                                                 callback_data=f'profile_edit phone {role}')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ",
                                                 callback_data=f'profile_edit tg_link {role}')
    keyboard.add(callback_button)
    callback_button = types.InlineKeyboardButton(text="–ú—ñ—Å—Ç–æ",
                                                 callback_data=f'profile_edit edit_city {role}')
    keyboard.add(callback_button)

    if role == 'master':
        callback_button = types.InlineKeyboardButton(text="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏",
                                                     callback_data='profile_edit card')
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text="–°–∞–ª–æ–Ω",
                                                     callback_data='profile_edit placement')
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text="–û–ø–∏—Å –∞–∫–∫–∞—É–Ω—Ç—É",
                                                     callback_data='profile_edit details')
        keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ",
                                                     callback_data='profile_edit photo')
        keyboard.add(callback_button)

    callback_button = types.InlineKeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å",
                                                 callback_data='menu')
    keyboard.add(callback_button)
    return keyboard


def working_days_buttons(working_days, option):
    keyboard = types.InlineKeyboardMarkup()
    data = []
    if working_days:
        for i in range(working_days.__len__()):
            data.append(working_days[i].day_name)
    if option == 'add':
        for day in days:
            if day not in data:
                callback_button = types.InlineKeyboardButton(text=day,
                                                             callback_data=f'add_working_day {day} add')
                keyboard.add(callback_button)
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —á–∞—Å",
                                                callback_data='set_working_time'))
        keyboard.add(types.InlineKeyboardButton(text="–ú–µ–Ω—é",
                                                callback_data='del_than_menu'))
        return keyboard
    elif option == 'show':
        text = ''
        counter = 1
        for day in working_days:
            text += str(counter) + f'. {day.day_name}. {day.working_hours if not day.non_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"} \n'
            counter += 1
        keyboard.add(types.InlineKeyboardButton(text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
                                                callback_data='set_working_days edit'))
        keyboard.add(types.InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å",
                                                callback_data='set_working_days add'))
        keyboard.add(types.InlineKeyboardButton(text="–ú–µ–Ω—é",
                                                callback_data='menu'))
        if text == '':
            text = '–ù–µ –¥–æ–¥–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –¥–Ω—è!'
        return [text, keyboard]
    elif option == 'edit':
        if working_days.__len__() < 1:
            return None
        for day in working_days:
            keyboard.add(types.InlineKeyboardButton(text=day.day_name, callback_data=f'edit_working_day start'
                                                                                     f' {day.id}'))
        return keyboard


def reserve_day(working_days, master_id, service_id):
    keyboard = types.InlineKeyboardMarkup()
    if working_days.__len__() < 1:
        return None
    for day in working_days:
        keyboard.add(types.InlineKeyboardButton(text=day.day_name, callback_data=f'reserve_day'
                                                                                 f' {day.id}'
                                                                                 f' {master_id}'
                                                                                 f' {service_id}'
                                                                                 f' False'))
    keyboard.add(back_and_delete())
    return keyboard


def edit_working_day(day_id):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å",
                                            callback_data=f'edit_working_day update_time {day_id}'))
    keyboard.add(types.InlineKeyboardButton(text="–ó—Ä–æ–±–∏—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º",
                                            callback_data=f'edit_working_day set_non_active {day_id}'))
    keyboard.add(types.InlineKeyboardButton(text="–ó—Ä–æ–±–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–º",
                                            callback_data=f'edit_working_day set_active {day_id}'))
    keyboard.add(types.InlineKeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å",
                                            callback_data=f'set_working_days show'))
    return keyboard


# def add_working_days(days_names)


def reg_as_master():
    keyboard = types.InlineKeyboardMarkup()
    callback_button1 = types.InlineKeyboardButton(text="–¢–∞–∫‚úÖ",
                                                  callback_data='reg_as_master')
    callback_button2 = types.InlineKeyboardButton(text="–ù—ñ‚ùå",
                                                  callback_data='del_message')
    keyboard.add(callback_button1, callback_button2)
    return keyboard


def user_confirmation_buttons(master_id, service_id):
    keyboard = types.InlineKeyboardMarkup()
    callback_button1 = types.InlineKeyboardButton(text="–î–∞–ª—ñ",
                                                  callback_data=f'choose_service {master_id} {service_id} confirmed')
    callback_button2 = types.InlineKeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è",
                                                  callback_data='del_message')
    keyboard.add(callback_button1, callback_button2)
    return keyboard


def to_completed_services():
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å",
                                                 callback_data='check_order_client 1')
    keyboard.add(callback_button)
    return keyboard


def set_hours(master_id, service_id, day_id, times):
    keyboard = types.InlineKeyboardMarkup()
    for time in times:
        callback_button = types.InlineKeyboardButton(text=time,
                                                     callback_data=f'create_order'
                                                                   f' {master_id}'
                                                                   f' {service_id}'
                                                                   f' {day_id}'
                                                                   f' {time}')
        keyboard.add(callback_button)
    keyboard.add(types.InlineKeyboardButton(text="–ó–∞–¥–∞—Ç–∏ —Å–≤—ñ–π —á–∞—Å",
                                            callback_data=f'reserve_day'
                                                          f' {day_id}'
                                                          f' {master_id}'
                                                          f' {service_id} True'))
    keyboard.add(back_and_delete())
    return keyboard
