import random
import re
import buttons
from methods import *
import os
import telebot
import base64
import time
import logging
import calculations

from config import token

bot = telebot.TeleBot(token=token)
data_path = os.curdir + '\\data\\'


@bot.message_handler(commands=['start'])
def start(message):
    bot.clear_step_handler_by_chat_id(message.from_user.id)
    keyboard = buttons.choose_language_buttons()
    bot.send_message(message.from_user.id, '–û–±–µ—Ä–∏ –º–æ–≤—É/Choose a language', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    bot.clear_step_handler_by_chat_id(call.from_user.id)

    try:
        flag = check_user(call.from_user.id)
    except Exception as ex:
        session.rollback()
        logging.error(f'Could not check user. Cause: {ex}. Time: {time.asctime()}')
        return

    if 'registration' in call.data:
        bot.delete_message(call.from_user.id, call.message.message_id)
        data = call.data.split(' ')
        if flag:
            bot.send_message(call.from_user.id, '–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!')
            to_menu(call)
            bot.answer_callback_query(call.id, text=" ", show_alert=False)
            return
        registration(call.message, data[1])
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'language' in call.data:
        greetings = ('–ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤—É—Ç—å –õ–æ–ª–∞! üíÅ‚Äç‚ôÄÔ∏è\n\n'
                     'ü§ñ –Ø —Ä–æ–±–æ—Ç —ñ –±—É–¥—É –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ä–æ–ª—å —Ç–≤–æ–≥–æ'
                     ' –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. \n\n')

        if flag:
            keyboard = buttons.choose_role_button_menu()
        else:
            keyboard = buttons.choose_role_button_reg()
            greetings += '–ê–ª–µ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —Ç—Ä–µ–±–∞  –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—åüëáüèª'

        bot.send_message(call.from_user.id, greetings,
                         reply_markup=keyboard)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif "choose role" in call.data:
        data = call.data.split(' ')
        keyboard = buttons.empty_template()

        if data[2] == 'reg':
            keyboard = buttons.choose_role_reg()
        elif data[2] == 'menu':
            keyboard = buttons.choose_role_menu()

        bot.send_message(call.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ä–æ–ª—å üë§",
                         reply_markup=keyboard)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'change_role' in call.data:
        bot.delete_message(call.from_user.id, call.message.message_id)
        data = call.data.split(' ')
        try:
            user_instance = get_user_role(call.from_user.id)
        except Exception as ex:
            logging.error(f'Could not get current role. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return

        if data[1] == '1':
            if user_instance:
                try:
                    set_current_role(call.from_user.id, 1)
                except Exception as ex:
                    logging.error(f'Could not set current role. Cause: {ex}. Time: {time.asctime()}')
                    session.rollback()
                    return
                to_menu(call)
                bot.answer_callback_query(call.id, text=" ", show_alert=False)
                return
            else:
                keyboard = buttons.reg_as_master()
                bot.send_message(call.from_user.id, '–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –º–∞–π—Å—Ç–µ—Ä. –ë–∞–∂–∞—î—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è?',
                                 reply_markup=keyboard)
            return
        else:
            try:
                set_current_role(call.from_user.id, 0)
            except Exception as ex:
                logging.error(f'Could not set current role. Cause: {ex}. Time: {time.asctime()}')
                session.rollback()
                return
            to_menu(call)
            bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'set_placement' in call.data:
        bot.delete_message(call.from_user.id, call.message.message_id)
        data = call.data.split(' ')
        try:
            update_placement(call.from_user.id, data[1])
        except Exception as ex:
            logging.error(f'Could not update placement. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return

        if data[2] == 'reg':
            set_current_role(call.from_user.id, True)
            # keyboard = buttons.to_menu()
            add_new_service(call)
            # bot.send_message(call.from_user.id, "–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä –≤–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —ñ –¥–æ –≤–∞—Å –≤–∂–µ –º–æ–∂–Ω–∞ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏—Å—å ü•≥",
            #                  reply_markup=keyboard)
        else:
            edit_profile(call.from_user.id, 'master')

        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    if not flag:
        keyboard = buttons.choose_role_button_reg()
        bot.send_message(call.from_user.id, "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å!", reply_markup=keyboard)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    if call.data == 'menu':
        to_menu(call)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif call.data == 'menu_1':
        bot.edit_message_reply_markup(call.from_user.id, call.message.message_id,
                                      reply_markup=buttons.master_menu_1(call.from_user.id))
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif call.data == 'menu_2':
        bot.edit_message_reply_markup(call.from_user.id, call.message.message_id,
                                      reply_markup=buttons.master_menu_2())
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'set_city' in call.data:
        bot.delete_message(call.from_user.id, call.message.message_id)
        data = call.data.split(' ')
        try:
            update_city(call.from_user.id, data[1], data[2])
            city = get_city_by_id(data[1])
        except Exception as ex:
            logging.error(f'Could not set or get city. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return
        bot.send_message(call.from_user.id, f'–í–∏ –æ–±—Ä–∞–ª–∏ –º—ñ—Å—Ç–æ: {city}üåÜ')

        if data[3] == 'reg':
            if data[2] == 'master':
                update_to_master(call.from_user.id)
                master_reg_start(call.message, call.from_user.id)
                bot.answer_callback_query(call.id, text=" ", show_alert=False)
                return
            else:
                keyboard = buttons.to_menu()
                bot.send_message(call.from_user.id, "–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä –≤–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ ü•≥",
                                 reply_markup=keyboard)
                bot.answer_callback_query(call.id, text=" ", show_alert=False)
                return
        else:
            edit_profile(call.from_user.id, data[2])
            bot.answer_callback_query(call.id, text=" ", show_alert=False)
            return

    elif call.data == 'check_profile':
        try:
            if get_user_role(call.from_user.id):
                show_profile(call.from_user.id, 'master')
            else:
                show_profile(call.from_user.id, 'client')
            bot.answer_callback_query(call.id, text=" ", show_alert=False)
        except Exception as ex:
            logging.error(f'Could not show profile. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return
        return

    elif call.data == 'add_media':
        add_certificate(call.message)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif call.data == 'add_sample_service':
        bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏ (–Ω–∞–∑–≤–∞ –ø–æ—Å–ª—É–≥–∏ –ø–æ–≤–∏–Ω–Ω–∞ –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è –≤—ñ–¥ '
                                            '–¥–æ–¥–∞–Ω–∏—Ö —Ä–∞–Ω—ñ—à–µ)')
        bot.register_next_step_handler(call.message, add_sample_service)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'check_certificates' in call.data:
        data = call.data.split(' ')
        certificates = get_certificates(data[1])
        end_index = certificates.__len__() - 1

        if end_index == -1:
            bot.answer_callback_query(call.id, text="–ù–∞ –∂–∞–ª—å, —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ñ  :(!")
            return

        index = 0
        try:
            show_certificates(index, end_index, certificates, call.from_user.id)
        except Exception as ex:
            logging.error(f'Could not show certificates. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'move_certificate' in call.data:
        indexes = call.data.split(' ')
        bot.delete_message(call.from_user.id, call.message.message_id)
        certificates = get_certificates(indexes[3])
        try:
            show_certificates(indexes[1], indexes[2], certificates, call.from_user.id)
        except Exception as ex:
            logging.error(f'Could not show certificates. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'check_sample_services' in call.data:
        data = call.data.split(' ')
        services = get_sample_services(data[1])
        end_index = services.__len__() - 1

        if end_index == -1:
            bot.answer_callback_query(call.id, text="–ù–∞ –∂–∞–ª—å, —Ä–æ–±–æ—Ç–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ñ  :(!")
            return

        index = 0
        try:
            show_services(index, end_index, services, call.from_user.id)
        except Exception as ex:
            logging.error(f'Could not show services. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'move_services' in call.data:
        indexes = call.data.split(' ')
        bot.delete_message(call.from_user.id, call.message.message_id)
        services = get_sample_services(indexes[3])
        try:
            show_services(indexes[1], indexes[2], services, call.from_user.id)
        except Exception as ex:
            logging.error(f'Could not show services. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif call.data == 'reg_as_master':
        move_user(call.from_user.id)
        master_reg_start(call.message, call.from_user.id)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'order_1' in call.data:
        data = call.data.split(' ')
        try:

            if data == 'client':
                user_instance = get_client(call.from_user.id)
            else:
                user_instance = get_master(call.from_user.id)

        except Exception as ex:
            logging.error(f'Could not get user instance. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return
        keyboard = buttons.order_placement_buttons(user_instance[0].city_id)
        bot.send_message(call.from_user.id, keyboard[0],
                         reply_markup=keyboard[1])
        bot.answer_callback_query(call.id, text=' ', show_alert=False)

    elif 'order_placement' in call.data:
        data = call.data.split(' ')
        try:
            masters = get_masters(data[1])
        except Exception as ex:
            logging.error(f'Could not get masters. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return
        end_index = masters.__len__() - 1

        if end_index == -1:
            bot.answer_callback_query(call.id, text="–ù–∞ –∂–∞–ª—å, —É –¥–∞–Ω–æ–º—É —Å–∞–ª–æ–Ω—ñ –º–∞–π—Å—Ç—Ä–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î–µ—Å—Ç—Ä–æ–≤–∞–Ω—ñ :(")
            return

        bot.send_message(call.from_user.id, '–ê –∑–∞—Ä–∞–∑ –æ–±–µ—Ä—ñ—Ç—å –º–∞–π—Å—Ç—Ä–∞',
                         reply_markup=buttons.del_button())
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        index = 0
        try:
            show_masters(index, end_index, masters, call.from_user.id)
        except Exception as ex:
            logging.error(f'Could not show masters. Cause: {ex}. Time: {time.asctime()}')
            return

    elif 'move_masters' in call.data:
        bot.delete_message(call.from_user.id, call.message.message_id)
        indexes = call.data.split(' ')
        masters = get_masters(indexes[3])
        try:
            show_masters(indexes[1], indexes[2], masters, call.from_user.id)
        except Exception as ex:
            logging.error(f'Could not show masters. Cause: {ex}. Time: {time.asctime()}')
            return
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif call.data == 'del_message':
        bot.delete_message(call.from_user.id, call.message.message_id)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'add_to_favorite' in call.data:
        data = call.data.split(' ')

        if str(data[1]) != str(call.from_user.id):
            try:
                flag = check_saved_masters(master_id=data[1], user_id=call.from_user.id)
            except Exception as ex:
                logging.error(f'Could not check saved masters. Cause: {ex}. Time: {time.asctime()}')
                session.rollback()
                return
            if flag:
                save_master(master_id=data[1], user_id=call.from_user.id)
                bot.answer_callback_query(call.id, text="–î–æ–¥–∞–Ω–æ!")
            else:
                bot.answer_callback_query(call.id, text="–í–∏ –≤–∂–µ –¥–æ–¥–∞–ª–∏ —Ü—å–æ–≥–æ –º–∞–π—Å—Ç—Ä–∞ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö!")
        else:
            bot.answer_callback_query(call.id, text="–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Å–∞–º–æ–≥–æ"
                                                    " —Å–µ–±–µ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö –º–∞–π—Å—Ç—Ä—ñ–≤!")

    elif call.data == 'saved_masters':
        keyboard = buttons.saved_masters(call.from_user.id)

        if keyboard is None:
            bot.answer_callback_query(call.id, text="–í–∏ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –º–∞–π—Å—Ç—Ä–∞ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö")
            return

        bot.send_message(call.from_user.id, "–£–ª—é–±–ª–µ–Ω—ñ –º–∞–π—Å—Ç—Ä–∏:", reply_markup=keyboard)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'check_services' in call.data:
        data = call.data.split(' ')
        try:
            reservation = data[2]
        except Exception as ex:
            print(ex)
            reservation = None
        keyboard = buttons.service_segments(data[1], False, reservation)
        bot.send_message(call.from_user.id, '–û–±–µ—Ä—ñ—Ç—å —Å–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª—É–≥ üßöüèª‚Äç',
                         reply_markup=keyboard)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'order_service' in call.data:
        data = call.data.split(' ')
        keyboard = buttons.get_services(data[2], call.from_user.id, data[1])

        if keyboard is None:
            bot.answer_callback_query(call.id, text="–ù–∞ –∂–∞–ª—å, –ø–æ—Å–ª—É–≥–∏ –Ω–µ –¥–æ–¥–∞–Ω—ñ")
            return

        if (str(call.from_user.id) is str(data[2])) and (data[3] is not 'reservation'):
            bot.send_message(call.from_user.id, '–£—Ç–æ—á–Ω—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É üóÇ',
                             reply_markup=keyboard[1])
        else:
            bot.send_message(call.from_user.id, keyboard[0],
                             reply_markup=keyboard[1])

        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'add_service' in call.data:
        # data = call.data.split(' ')
        add_new_service(call)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'service_segment' in call.data:
        data = call.data.split(' ')
        try:
            services_name = get_service_names(call.from_user.id, data[1])
        except Exception as ex:
            logging.error(f'Could not get service names. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return
        keyboard = buttons.service_buttons(data[1], services_name)
        bot.send_message(call.from_user.id, '–¢–µ–ø–µ—Ä —É—Ç–æ—á–Ω—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É üóÇ',
                         reply_markup=keyboard)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'add_instance' in call.data:
        data = call.data.split(' ')
        service = data[1]
        segment = data[2]

        if data.__len__() == 4:
            service = data[1] + ' ' + data[2]
            segment = data[3]

        try:
            service_id = create_service(call.from_user.id, str(service), str(segment))
        except Exception as ex:
            logging.error(f'Could not create service. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return
        bot.delete_message(call.from_user.id, call.message.message_id)
        bot.send_message(call.from_user.id, service + ':')
        bot.send_message(call.from_user.id, 'üíµ –Ø–∫–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä–∏?')
        bot.register_next_step_handler(message=call.message, service_id=service_id, segment=segment,
                                       callback=set_money_cost, reg='reg')
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'sav_masters' in call.data:
        data = call.data.split(' ')
        try:
            masters = get_master_by_id(data[1])
        except Exception as ex:
            logging.error(f'Could not get masters. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return
        show_masters(0, 0, masters, call.from_user.id)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'choose_service ' in call.data:
        data = call.data.split(' ')
        # check_time_slot(data[1], call, data[2])
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'set_working_days' in call.data:
        data = call.data.split(' ')
        set_working_days(call, False, data[1])
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return
    elif 'add_working_day' in call.data:
        data = call.data.split(' ')
        create_working_day(call.from_user.id, data[1])
        set_working_days(call, True, data[2])
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return
    elif call.data == 'pre_check_order':
        keyboard = buttons.client_check_order_buttons()
        bot.send_message(call.from_user.id, '–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é', reply_markup=keyboard)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    # elif 'check_order_client' in call.data:
    #     data = call.data.split(' ')
    #     try:
    #         orders = get_orders_for_client(call.from_user.id, data[1])
    #     except Exception as ex:
    #         logging.error(f'Could not get orders for client. Cause: {ex}. Time: {time.asctime()}')
    #         session.rollback()
    #         return
    #     if orders.__len__() < 1:
    #         bot.answer_callback_query(call.id, text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–Ω—ñ")
    #         return
    #     try:
    #         show_orders(orders, call.from_user.id, False)
    #     except Exception as ex:
    #         logging.error(f'Could not show orders. Cause: {ex}')
    #         return
    #     bot.answer_callback_query(call.id, text=" ", show_alert=False)

    # elif 'check_order_master' in call.data:
    #     data = call.data.split(' ')
    #     try:
    #         orders = get_orders_for_master(call.from_user.id, data[1])
    #     except Exception as ex:
    #         logging.error(f'Could not get orders for master. Cause: {ex}. Time: {time.asctime()}')
    #         session.rollback()
    #         return
    #     if orders.__len__() < 1:
    #         bot.answer_callback_query(call.id, text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–Ω—ñ")
    #         return
    #     try:
    #         show_orders(orders, call.from_user.id, True)
    #     except Exception as ex:
    #         logging.error(f'Could not show orders. Cause: {ex}. Time: {time.asctime()}')
    #         return
    #     bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'mark_as_done' in call.data:
        data = call.data.split(' ')
        try:
            update_order_as_done(data[1])
        except Exception as ex:
            logging.error(f'Could not update order as completed. Cause: {ex}. Time: {time.asctime()}')
            session.rollback()
            return
        bot.answer_callback_query(call.id, text="–í—ñ–¥–º—ñ—á–µ–Ω–æ!")

    elif call.data == 'pre_check_order':
        keyboard = buttons.client_check_order_buttons()
        bot.send_message(call.from_user.id, '–û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏:',
                         reply_markup=keyboard)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'edit_profile' in call.data:
        data = call.data.split(' ')
        edit_profile(call.from_user.id, data[1])
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'profile_edit' in call.data:
        data = call.data.split(' ')

        if data[1] == 'name':
            bot.send_message(call.from_user.id, "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è"
                                                "(–º–æ–∂–Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ—é) —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter ‚Ü©")
            bot.register_next_step_handler(message=call.message, call_id=call.id, callback=edit_name, role=data[2])

        elif data[1] == 'phone':
            bot.send_message(call.from_user.id, "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π —Ç–µ–ª–µ—Ñ–æ–Ω ‚òéÔ∏è",
                             reply_markup=buttons.send_contact())
            bot.register_next_step_handler(message=call.message, callback=edit_telephone, role=data[2])

        elif data[1] == 'tg_link':
            try:
                update_user_name(call.from_user.id, call.from_user.username, role=data[2])
            except Exception as ex:
                logging.error(f'Could not update username. Cause: {ex}. Time: {time.asctime()}')
                session.rollback()
                return
            bot.answer_callback_query(call.id, text="–ó–º—ñ–Ω–µ–Ω–æ")

        elif data[1] == 'card':
            bot.send_message(call.from_user.id,
                             '–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏, –Ω–∞ —è–∫—É '
                             '–±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –∫–æ—à—Ç–∏.\n\n'
                             '–¢–∞–∫–æ–∂ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ –∑ —á–∞—Ç—É üòâ')
            bot.register_next_step_handler(message=call.message, call_id=call.id, callback=edit_card)

        elif data[1] == 'placement':
            user_instance = get_master(call.from_user.id)
            data = buttons.set_placement_buttons(user_instance[0].city_id, '')
            bot.send_message(call.from_user.id, data[0],
                             reply_markup=data[1])
            bot.answer_callback_query(call.id, text=" ", show_alert=False)

        elif data[1] == 'edit_city':
            keyboard = buttons.city_buttons(data[2], '1')
            bot.send_message(call.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –í–∞—à–µ –º—ñ—Å—Ç–æüåÜ:", reply_markup=keyboard)
            bot.answer_callback_query(call.id, text=" ", show_alert=False)

        elif data[1] == 'details':
            bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –æ–ø–∏—Å –¥–æ –∞–∫–∫–∞—É–Ω—Ç—É, '
                                                '—â–æ –≤–∏ –≤–º—ñ—î—Ç–µ —ñ —Ç–¥.')
            bot.register_next_step_handler(message=call.message, call_id=call.id, callback=edit_details)

        elif data[1] == 'photo':
            bot.send_message(call.from_user.id, '–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –º–µ–Ω—ñ –≤–∞—à–µ —Ñ–æ—Ç–æ')
            bot.register_next_step_handler(message=call.message, reg='', callback=set_acc_photo)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'edit_service' in call.data:
        data = call.data.split(' ')
        keyboard = buttons.edit_service(call.from_user.id, data[1])

        if keyboard is None:
            bot.answer_callback_query(call.id, text="–ü–æ—Å–ª—É–≥ –Ω–µ –¥–æ–¥–∞–Ω–æ(")
            return

        bot.send_message(call.from_user.id, '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏üõ†',
                         reply_markup=keyboard)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'update_service' in call.data:
        data = call.data.split(' ')
        bot.delete_message(call.from_user.id, call.message.message_id)
        keyboard = buttons.edit_service_buttons(data[1], data[2], call.from_user.id)
        bot.send_message(call.from_user.id, '–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏‚öô',
                         reply_markup=keyboard)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'update_price' in call.data:
        data = call.data.split(' ')
        bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É –ø–æ—Å–ª—É–≥–∏üí∏')
        bot.register_next_step_handler(call.message, set_money_cost, data[1], data[2])
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'update_time_cost' in call.data:
        data = call.data.split(' ')
        bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥–∏‚è≥')
        bot.register_next_step_handler(message=call.message, callback=set_time_cost,
                                       service_id=data[1], segment=data[2])
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'delete_service' in call.data:
        data = call.data.split(' ')
        bot.delete_message(call.from_user.id, call.message.message_id)
        try:
            delete_service(data[1])
        except Exception as ex:
            logging.error(f'Could not delete service. Cause: {ex}. Time: {time.asctime()}')
            bot.answer_callback_query(call.id, text="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞!")
            return
        keyboard = buttons.service_segments(call.from_user.id, False)
        bot.send_message(call.from_user.id, '–û–±–µ—Ä—ñ—Ç—å —Å–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª—É–≥ üßöüèª‚Äç',
                         reply_markup=keyboard)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'edit_sample_services' in call.data:
        data = call.data.split(' ')
        try:
            edit_sample_service(data[1], call.from_user.id)
        except Exception as ex:
            logging.error(f'Could not edit sample service. Cause: {ex}. Time: {time.asctime()}')
            bot.answer_callback_query(call.id, text="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞!")
            return
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'edit_sample_serv_name' in call.data:
        data = call.data.split(' ')
        bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏')
        bot.register_next_step_handler(call.message, edit_sample_service_name, data[1])
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'edit_sample_serv_photo' in call.data:
        data = call.data.split(' ')
        bot.send_message(call.from_user.id, '–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–æ–≤—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é')
        bot.register_next_step_handler(call.message, edit_sample_service_photo, data[1])
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'del_sample_service' in call.data:
        data = call.data.split(' ')
        try:
            delete_service_image(data[1], call.from_user.id)
            delete_sample_service(data[1])
        except Exception as ex:
            logging.error(f'Could not delete sample service. Cause: {ex}. Time: {time.asctime()}')
            bot.answer_callback_query(call.id, text="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞!")
            return
        services = get_sample_services(call.from_user.id)
        end_index = services.__len__() - 1

        if end_index == -1:
            to_menu(call)
            bot.answer_callback_query(call.id, text=" ", show_alert=False)
            return

        index = 0
        try:
            show_services(index, end_index, services, call.from_user.id)
        except Exception as ex:
            logging.error(f'Could not show services. Cause: {ex}. Time: {time.asctime()}')
            return
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'edit_certificate' in call.data:
        data = call.data.split(' ')
        try:
            edit_certificate(data[1], call.from_user.id)
        except Exception as ex:
            logging.error(f'Could not edit certificate. Cause: {ex}. Time: {time.asctime()}')
            bot.answer_callback_query(call.id, text="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞!")
            return
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'edit_cer_description' in call.data:
        data = call.data.split(' ')
        bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å')
        bot.register_next_step_handler(call.message, edit_certificate_description, data[1])
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'edit_cer_photo' in call.data:
        data = call.data.split(' ')
        bot.send_message(call.from_user.id, '–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–æ–≤—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é')
        bot.register_next_step_handler(call.message, edit_certificate_photo, data[1])
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'del_cer' in call.data:
        data = call.data.split(' ')
        try:
            delete_certificate_image(data[1], call.from_user.id)
            delete_certificate(data[1])
        except Exception as ex:
            logging.error(f'Could not delete certificate. Cause: {ex}. Time: {time.asctime()}')
            bot.answer_callback_query(call.id, text="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞!")
            return
        certificates = get_certificates(call.from_user.id)
        end_index = certificates.__len__() - 1

        if end_index == -1:
            to_menu(call)
            bot.answer_callback_query(call.id, text=" ", show_alert=False)
            return

        index = 0
        try:
            show_certificates(index, end_index, certificates, call.from_user.id)
        except Exception as ex:
            logging.error(f'Could not show certificates. Cause: {ex}. Time: {time.asctime()}')
            return
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'send_rating' in call.data:
        data = call.data.split(' ')
        keyboard = buttons.set_rating_buttons(data[1])
        bot.send_message(call.from_user.id, '–û—Ü—ñ–Ω—ñ—Ç—å —Ä–æ–±–æ—Ç—É –º–∞–π—Å—Ç—Ä–∞ ü§©', reply_markup=keyboard)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'set_rating' in call.data:
        keyboard = buttons.to_completed_services()
        bot.delete_message(call.from_user.id, call.message.message_id)
        data = call.data.split(' ')
        response = create_rating(master_id=data[2], client_id=call.from_user.id, point=int(data[1]))

        if response is None:
            bot.send_message(call.from_user.id, '–í–∏ –≤–∂–µ –æ—Ü—ñ–Ω—é–≤–∞–ª–∏ —Ü—å–æ–≥–æ –º–∞–π—Å—Ç—Ä–∞!', reply_markup=keyboard)
        else:
            bot.send_message(call.from_user.id, '–î—è–∫—É—é –∑–∞ –≤—ñ–≥—É–∫ ‚ò∫', reply_markup=keyboard)

        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif 'send_feedback' in call.data:
        data = call.data.split(' ')
        try:
            flag = check_feedback(call.from_user.id, data[1])
        except Exception as ex:
            logging.error(f'Could not check feedback. Cause: {ex}. Time: {time.asctime()}')
            return

        if flag:
            bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –º–∞–π—Å—Ç—Ä–∞ *–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏'
                                                ' –µ–º–æ–¥–∑—ñ')
            bot.register_next_step_handler(call.message, set_feedback, call.from_user.id, data[1], call)
        else:
            bot.answer_callback_query(call.id, text="–í–∏ –≤–∂–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ —Ü—å–æ–≥–æ –º–∞–π—Å—Ç—Ä–∞")
            return

        bot.answer_callback_query(call.id, text=" ", show_alert=False)
        return

    elif call.data == 'del_than_menu':
        bot.delete_message(call.from_user.id, call.message.message_id)
        to_menu(call)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif call.data == 'set_working_time':
        bot.send_message(call.from_user.id,
                         '–ù–∞–ø–∏—à—ñ—Ç—å –≥–æ–¥–∏–Ω–∏, –∫–æ–ª–∏ –í–∏ –ø—Ä–∞—Ü—é—î—Ç–µ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥,'
                         ' 9-00-18-00, –¥–µ \n 9-00 - –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è, 18-00'
                         ' –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è. –¶—ñ –≥–æ–¥–∏–Ω–∏ –±—É–¥—É—Ç—å –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ –¥–ª—è'
                         ' –≤—Å—ñ—Ö —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤. –í –º–µ–Ω—é "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ä–æ–±–æ—á–∏–π —á–∞—Å"'
                         ' –í–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è'
                         ' –æ–∫—Ä–µ–º–æ.')
        bot.register_next_step_handler(call.message, set_working_time, call)
        bot.answer_callback_query(call.id, text=" ", show_alert=False)

    elif 'edit_working_day' in call.data:
        data = call.data.split(' ')

        if data[1] == 'start':
            keyboard = buttons.edit_working_day(data[2])
            bot.send_message(call.from_user.id, '–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏‚öô',
                             reply_markup=keyboard)
            bot.answer_callback_query(call.id, text=" ", show_alert=False)

        elif data[1] == 'update_time':
            bot.send_message(call.from_user.id,
                             '–ù–∞–ø–∏—à—ñ—Ç—å –≥–æ–¥–∏–Ω–∏, –∫–æ–ª–∏ –í–∏ –ø—Ä–∞—Ü—é—î—Ç–µ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥,'
                             ' 9-00-18-00, –¥–µ \n 9-00 - –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è, 18-00'
                             ' –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è.')
            bot.register_next_step_handler(call.message, update_time, data[2], call)

        elif data[1] == 'set_non_active':
            try:
                response = edit_day(data[2], non_active=True)
            except Exception as ex:
                logging.error(f'Could not update working hours. Cause: {ex}. Time: {time.asctime()}')
                return
            if response is None:
                logging.error('edit_day method: unknown option')

            set_working_days(call, False, 'show')

        elif data[1] == 'set_active':
            try:
                response = edit_day(data[2], active=True)
            except Exception as ex:
                logging.error(f'Could not update working hours. Cause: {ex}. Time: {time.asctime()}')
                return
            if response is None:
                logging.error('edit_day method: unknown option')

            set_working_days(call, False, 'show')


def update_time(message, day_id, call):

    if not calculations.regex_time(message):
        bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. '
                                          '(–ü—Ä–∏–∫–ª–∞–¥: 9-00-18-00)')
        bot.register_next_step_handler(message, update_time, day_id, call)
        return

    if not calculations.check_time(message.text):
        bot.send_message(message.chat.id, '–ß–∞—Å –ø–æ—á–∞—Ç–∫—É –Ω–µ –º–æ–∂–µ –±—É–¥—É –±—ñ–ª—å—à–∏–º –∑–∞ —á–∞—Å –∫—ñ–Ω—Ü—è —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è, '
                                          '—Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, update_time, day_id, call)
        return

    try:
        response = edit_day(day_id, set_time=True, time=message.text)
    except Exception as ex:
        logging.error(f'Could not update working hours. Cause: {ex}. Time: {time.asctime()}')
        return

    if response is None:
        logging.error('edit_day method: unknown option')

    set_working_days(call, False, 'show')


def set_working_time(message, call):
    if not calculations.regex_time(message):
        bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. '
                                          '(–ü—Ä–∏–∫–ª–∞–¥: 9-00-18-00)')
        bot.register_next_step_handler(message, set_working_time, call)
        return
    if not calculations.check_time(message.text):
        bot.send_message(message.chat.id, '–ß–∞—Å –ø–æ—á–∞—Ç–∫—É –Ω–µ –º–æ–∂–µ –±—É–¥—É –±—ñ–ª—å—à–∏–º –∑–∞ —á–∞—Å –∫—ñ–Ω—Ü—è —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è, '
                                          '—Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, set_working_time, call)
        return
    try:
        update_working_time(message.from_user.id, message.text)
    except Exception as ex:
        logging.error(f'Could not set working time. Cause: {ex}, Time: {time.asctime()}')
        return
    bot.send_message(call.from_user.id, '–ß–∞—Å –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ!‚è±')
    to_menu(call)


def set_working_days(call, again, option):
    try:
        days = get_days(call.from_user.id)
    except Exception as ex:
        logging.error(f'Could not get master working days from db. Cause: {ex}. Time: {time.asctime()}')
        return

    if option == 'show':
        keyboard = buttons.working_days_buttons(days, option)
        bot.send_message(call.from_user.id, keyboard[0], reply_markup=keyboard[1])
        return

    elif option == 'add':
        keyboard = buttons.working_days_buttons(days, option)

        if again:
            bot.edit_message_reply_markup(call.from_user.id, call.message.message_id,
                                          reply_markup=keyboard)
        else:
            bot.send_message(call.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –¥–Ω—ñ, –ø–æ —è–∫–∏–º –í–∏ –ø—Ä–∞—Ü—é—î—Ç–µüë©‚Äç‚öï",
                             reply_markup=keyboard)
        return

    elif option == 'edit':
        keyboard = buttons.working_days_buttons(days, option)

        if keyboard is None:
            bot.send_message(call.from_user.id, '–†–æ–±–æ—á—ñ –¥–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ!')
            set_working_days(call, False, 'show')
            return
        bot.send_message(call.from_user.id, '–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏',
                         reply_markup=keyboard)
        return


def add_new_service(call):
    keyboard = buttons.service_segments(call.from_user.id, True)
    bot.send_message(call.from_user.id,
                     '–û–±–µ—Ä—ñ—Ç—å —Å–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª—É–≥, —â–æ –Ω–∞–¥–∞—î—Ç–µ üßöüèª‚Äç‚ôÄ',
                     reply_markup=keyboard)


def set_feedback(message, user_id, master_id, call):
    keyboard = buttons.to_completed_services()

    if message.text is None:
        bot.send_message(user_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç—É(')
        to_menu(call)
        return
    else:
        try:
            create_feedback(master_id, user_id, message.text)
        except Exception as ex:
            logging.error(f'Could not create feedback. Cause: {ex}. Time: {time.asctime()}')
            return

    bot.send_message(call.from_user.id, '–î—è–∫—É—é –∑–∞ –≤—ñ–≥—É–∫ ‚ò∫', reply_markup=keyboard)
    return


def delete_service_image(service_id, user_id):
    service_instance = get_sample_service_by_id(service_id)

    if service_instance[0].image is not None:
        try:
            os.remove(data_path + str(user_id) + '\\services\\' +
                      str(service_instance[0].image) + '.jpg')
        except Exception as ex:
            logging.error(f'Could not delete service image. Cause: {ex}. Time: {time.asctime()}')


def delete_certificate_image(certificate_id, user_id):
    certificate_instance = get_certificate_by_id(certificate_id)

    if certificate_instance[0].image is not None:
        try:
            os.remove(data_path + str(user_id) + '\\certificates\\' +
                      str(certificate_instance[0].image) + '.jpg')
        except Exception as ex:
            logging.error(f'Could not delete certificate image. Cause: {ex}. Time: {time.asctime()}')


def edit_certificate(certificate_id, user_id):
    keyboard = buttons.edit_certificate_buttons(certificate_id, user_id)
    bot.send_message(user_id, '–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏‚öô',
                     reply_markup=keyboard)


def edit_certificate_description(message, certificate_id):
    if message.text is None:
        bot.send_message(message.from_user.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É,'
                                               ' –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏')
        bot.register_next_step_handler(message, edit_certificate_description, certificate_id)

    try:
        update_certificate_description(certificate_id, message.text)
    except Exception as ex:
        logging.error(f'Could not update certificate description. Cause: {ex}. Time: {time.asctime()}')
        edit_certificate(certificate_id, message.from_user.id)
        return
    edit_certificate(certificate_id, message.from_user.id)
    return


def edit_certificate_photo(message, certificate_id):
    certificate_instance = get_certificate_by_id(certificate_id)
    try:
        photo = get_photo(message)
    except Exception as ex:
        logging.error(f'Could not get certificate photo. Cause: {ex}. Input: {message.text}. Time: {time.asctime()}')
        bot.send_message(message.from_user.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é (–º–æ–∂–ª–∏–≤–æ –í–∏ —ó—ó –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–∞–π–ª—É,"
                                               " –ø–æ—Ç—Ä—ñ–±–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó!)")
        bot.register_next_step_handler(message, edit_certificate_photo)
        return

    if certificate_instance.__len__() < 1:
        return

    if certificate_instance[0].image is not None:
        ran = certificate_instance[0].image
    else:
        ran = gen_path(message, 'certificates')

    try:
        update_certificate_photo(message, ran, False, photo)
    except Exception as ex:
        logging.error(f'Could not update certificate photo. Cause: {ex}. Time: {time.asctime()}')
        return
    edit_certificate(certificate_id, message.from_user.id)


def update_certificate_photo(message, ran, create, photo):
    if not os.path.exists(data_path + str(message.from_user.id) + '\\certificates'):
        os.makedirs(data_path + str(message.from_user.id) + '\\certificates')

    with open(data_path + str(message.from_user.id) + '\\certificates\\' +
              str(ran) + '.jpg', 'wb') as file:
        file.write(photo)
    image = str(ran)

    if create:
        try:
            create_certificate(message.from_user.id, image)
        except Exception as ex:
            logging.error(f'Could not create certificate. Cause: {ex}. Time: {time.asctime()}')
            return
        return image
    else:
        return


def to_menu(call):
    try:
        if get_user_role(call.from_user.id):
            user_instance = get_master(call.from_user.id)

            if user_instance[0].cur_role:
                keyboard = buttons.master_menu_1(call.from_user.id)
            else:
                keyboard = buttons.client_menu('master')

        else:
            keyboard = buttons.client_menu('client')
    except Exception as ex:
        logging.error(f'Could not get user data. Func: to_menu . Cause: {ex}. Time: {time.asctime()}')
        return
    bot.send_message(call.from_user.id, '–ú–µ–Ω—é', reply_markup=keyboard)


def edit_sample_service(service_id, user_id):
    keyboard = buttons.edit_sample_service_buttons(service_id, user_id)
    bot.send_message(user_id, '–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏‚öô',
                     reply_markup=keyboard)


def edit_sample_service_photo(message, service_id):
    try:
        service_instance = get_sample_service_by_id(service_id)
    except Exception as ex:
        logging.error(f'Could not get sample service data. Cause: {ex}. Time: {time.asctime()}')
        return
    try:
        photo = get_photo(message)
    except Exception as ex:
        logging.error(f'Could not get sample service photo. Cause: {ex}. Input: {message.text}. Time: {time.asctime()}')
        bot.send_message(message.from_user.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é (–º–æ–∂–ª–∏–≤–æ –í–∏ —ó—ó –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–∞–π–ª—É,"
                                               " –ø–æ—Ç—Ä—ñ–±–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó!)")
        bot.register_next_step_handler(message, edit_sample_service_photo, service_id)
        return

    if service_instance.__len__() < 1:
        return

    if service_instance[0].image is not None:
        ran = service_instance[0].image
    else:
        ran = gen_path(message, 'services')

    try:
        update_samp_serv_photo(message, service_id, ran, photo)
    except Exception as ex:
        logging.error(f'Could not update sample service photo. Cause: {ex}. Time: {time.asctime()}')
        return
    edit_sample_service(service_id, message.from_user.id)


def update_samp_serv_photo(message, service_id, ran, photo):
    if not os.path.exists(data_path + str(message.from_user.id) + '\\services'):
        os.makedirs(data_path + str(message.from_user.id) + '\\services')

    with open(data_path + str(message.from_user.id) + '\\services\\' +
              str(ran) + '.jpg', 'wb') as file:
        file.write(photo)
    image = str(ran)
    try:
        update_service_photo(message.from_user.id, service_id, image)
    except Exception as ex:
        logging.error(f'Could not update service photo. Cause: {ex}. Time: {time.asctime()}')
        return


def edit_sample_service_name(message, service_id):
    if message.text is None:
        bot.send_message(message.from_user.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É,'
                                               ' –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏')
        bot.register_next_step_handler(message, edit_sample_service_name, service_id)

    try:
        update_sample_service_name(service_id, message.text)
    except Exception as ex:
        logging.error(f'Could not update sample service name. Cause: {ex}. Time: {time.asctime()}')
        edit_sample_service(service_id, message.from_user.id)
        return
    edit_sample_service(service_id, message.from_user.id)
    return


def edit_service(user_id, segment):
    keyboard = buttons.get_services(user_id, user_id, segment)
    bot.send_message(user_id, keyboard[0],
                     reply_markup=keyboard[1])


def master_reg_start(message, user_id):
    bot.send_message(user_id, '–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –º–µ–Ω—ñ –≤–∞—à–µ —Ñ–æ—Ç–æ')
    bot.register_next_step_handler(message=message, reg='reg', callback=set_acc_photo)


def edit_name(message, call_id, role):
    try:
        update_name(message.from_user.id, message.text, role)
    except Exception as ex:
        logging.error(f'Could not update name. Cause: {ex}. Time: {time.asctime()}')
        return
    edit_profile(message.from_user.id, role)
    bot.answer_callback_query(call_id, text="–ó–º—ñ–Ω–µ–Ω–æ")


def edit_telephone(message, role):
    try:
        if message.contact is not None:
            update_telephone(message.from_user.id, message.contact.phone_number, role)
        else:
            update_telephone(message.from_user.id, message.text, role)

    except Exception as ex:
        logging.error(f'Could not update telephone. Cause: {ex}. Input: {message.text}. Time: {time.asctime()}')
        return
    bot.send_message(message.from_user.id, '–ó–º—ñ–Ω–µ–Ω–æ!', reply_markup=buttons.del_button())
    edit_profile(message.from_user.id, role)


def edit_card(message, call_id):
    try:
        update_card(message.from_user.id, base64.standard_b64encode(message.text.encode('UTF-8')))
    except Exception as ex:
        logging.error(f'Could not update credit card num. Cause: {ex}. Time: {time.asctime()}')
        return
    edit_profile(message.from_user.id, 'master')
    bot.answer_callback_query(call_id, text="–ó–º—ñ–Ω–µ–Ω–æ")


def edit_profile(user_id, role):
    keyboard = buttons.edit_profile_buttons(role)
    bot.send_message(user_id, '–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏üõ†',
                     reply_markup=keyboard)


def edit_details(message, call_id):
    try:
        update_acc_details(message.from_user.id, message.text)
    except Exception as ex:
        logging.error(f'Could not update account details. Cause: {ex}. Input: {message.text}. Time: {time.asctime()}')
        return
    edit_profile(message.from_user.id, 'master')
    bot.answer_callback_query(call_id, text="–ó–º—ñ–Ω–µ–Ω–æ")


def set_money_cost(message, service_id, segment, reg='1'):
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '–¶–µ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ')
        bot.register_next_step_handler(message, set_money_cost, service_id, segment, reg)
        return

    try:
        update_service_cost(service_id, message.text)
    except Exception as ex:
        logging.error(f'Could not update service cost. Cause: {ex}. Input: {message.text}. Time: {time.asctime()}')
        return

    if reg == 'reg':
        bot.send_message(message.chat.id, '–°–∫—ñ–ª—å–∫–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞–π–º–∞—î —á–∞—Å—É‚è±? \n\n'
                                          '_–ù–∞–ø—Ä–∏–∫–ª–∞–¥, 1-15 ‚Äì —Ü–µ –±—É–¥–µ –æ–¥–Ω–∞ –≥–æ–¥–∏–Ω–∞, '
                                          '15 —Ö–≤–∏–ª–∏–Ω._',
                         parse_mode='markdown')
        bot.register_next_step_handler(message, set_time_cost, service_id, segment, reg)
    else:
        bot.send_message(message.from_user.id, '–í–∏–∫–æ–Ω–∞–Ω–æ!')
        edit_service(message.from_user.id, segment)


def set_time_cost(message, service_id, segment, reg='1'):
    if re.match(r'^([0-1]?[0-9]|2[0-3])-[0-5][0-9]$', message.text):
        data = message.text.split('-')
    else:
        bot.send_message(message.chat.id, '–§–æ—Ä–º–∞—Ç —á–∞—Å—É: 1-15 ‚Äì —Ü–µ –±—É–¥–µ –æ–¥–Ω–∞ '
                                          '–≥–æ–¥–∏–Ω–∞, 15 —Ö–≤–∏–ª–∏–Ω.')
        bot.register_next_step_handler(message, set_time_cost, service_id, segment, reg)
        return

    try:
        update_service_time_cost(service_id, data[0] + ':' + data[1])
    except Exception as ex:
        logging.error(f'Could not update service time cost. Cause: {ex}. Input: {message.text}. Time: {time.asctime()}')
        return

    if reg == 'reg':
        keyboard = buttons.to_menu()
        keyboard.add(buttons.back())
        keyboard.add(buttons.add_more_button(segment))
        bot.send_message(message.chat.id, '–ü—Ä–æ—Ü–µ–¥—É—Ä—É –¥–æ–¥–∞–Ω–æ üëç', reply_markup=keyboard)
    else:
        bot.send_message(message.from_user.id, '–í–∏–∫–æ–Ω–∞–Ω–æ!')
        edit_service(message.from_user.id, segment)


def show_orders(orders, user_id, master_flag):
    for order in orders:
        keyboard = buttons.empty_template()
        try:
            service = get_service_by_id(order.service_id)
            master = get_master(order.master_id)
        except Exception as ex:
            logging.error(f'Could not get data. Func: show_orders. Cause: {ex}. Time: {time.asctime()}')
            return
        prepaid = '–¢–∞–∫' if order.prepaid else '–ù—ñ'

        if not master_flag:
            try:

                if check_rating(user_id, order.master_id) and order.done:
                    keyboard.add(buttons.rating_button(order.master_id))

                if check_feedback(user_id, order.master_id) and order.done:
                    keyboard.add(buttons.feedback_button(order.master_id))

            except Exception as ex:
                logging.error(f'Could not check rating or feedback. Cause: {ex}. Time: {time.asctime()}')
                return

        elif master_flag and not order.done:
            keyboard.add(buttons.mark_as_done(order.id))
        bot.send_message(user_id, f'`–ù–∞–∑–≤–∞ –ø–æ—Å–ª—É–≥–∏:` {str(service[0].name)} \n'
                                  f"`–Ü–º'—è –º–∞–π—Å—Ç—Ä–∞:` {str(master[0].name)} \n"
                                  f"`–¢–µ–ª–µ—Ñ–æ–Ω –º–∞–π—Å—Ç—Ä–∞:` {str(master[0].telephone)} \n"
        # f"`–î–∞—Ç–∞:` {str(time_slot[0].date)} \n"
        # f"`–ü–æ—á–∞—Ç–æ–∫ –æ:` {str(time_slot[0].start_time)} \n"
                                  f"`–ü–µ—Ä–µ–¥–ø–ª–∞—á–µ–Ω–æ: ` {str(prepaid)} \n",
                         reply_markup=keyboard, parse_mode='markdown')
    bot.send_message(user_id, '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –º–µ–Ω—é', reply_markup=buttons.to_menu())


def registration(message, role):
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è, –∑–∞ —è–∫–∏–º –∫–ª—ñ—î–Ω—Ç –∑–º–æ–∂–µ –≤–∞—Å –∑–Ω–∞–π—Ç–∏ "
                                      "(–º–æ–∂–Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ—é) —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter ‚Ü©Ô∏è")
    bot.register_next_step_handler(message=message, role=role, callback=set_name)


def set_name(message, role):
    try:
        create_user(user_id=message.from_user.id, name=message.text, username=message.from_user.username, role=role)
    except Exception as ex:
        logging.error(f'Could not set name. Cause: {ex}. Time: {time.asctime()}')
        return
    try:
        create_user_role(message.from_user.id)

        if role == 'master':
            update_master_flag(message.from_user.id)

    except Exception as ex:
        logging.error(f'Could not create user role, or update user to master. Cause: {ex}. Time: {time.asctime()}')
        return
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π —Ç–µ–ª–µ—Ñ–æ–Ω ‚òéÔ∏è",
                     reply_markup=buttons.send_contact())
    bot.register_next_step_handler(message=message, role=role, callback=set_telephone)


def set_telephone(message, role):
    try:

        if message.contact is not None:
            update_telephone(message.from_user.id, message.contact.phone_number, role)
        else:
            update_telephone(message.from_user.id, message.text, role)

    except Exception as ex:
        logging.error(f'Could not set telephone. Cause: {ex}. Time: {time.asctime()}')
        return
    keyboard = buttons.city_buttons(role, 'reg')
    bot.send_message(message.from_user.id, '–°–ª—ñ–¥—É–π—Ç–µ –¥–∞–ª—ñ!', reply_markup=buttons.del_button())
    bot.send_message(message.chat.id, "–ê –∑–∞—Ä–∞–∑ –æ–±–µ—Ä—ñ—Ç—å –í–∞—à–µ –º—ñ—Å—Ç–æ:", reply_markup=keyboard)


def set_acc_photo(message, reg):
    if not os.path.exists(data_path + str(message.from_user.id) + '\\profile'):
        os.makedirs(data_path + str(message.from_user.id) + '\\profile')
    try:
        photo = get_photo(message)
    except Exception as ex:
        logging.error(f'Could not load account photo. Cause: {ex}. Input: {message}. Time: {time.asctime()}')
        bot.send_message(message.from_user.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é (–º–æ–∂–ª–∏–≤–æ –í–∏ —ó—ó –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–∞–π–ª—É,"
                                               " –ø–æ—Ç—Ä—ñ–±–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó!)")
        bot.register_next_step_handler(message, set_acc_photo, reg)
        return
    with open(data_path + str(message.from_user.id) + '\\profile\\profile.jpg', 'wb') as file:
        file.write(photo)
    try:
        update_acc_photo(message.from_user.id)
    except Exception as ex:
        logging.error(f'Could not set acc photo (Line: 1067). Cause: {ex}. Time: {time.asctime()}')
        return

    if reg == 'reg':
        bot.send_message(message.from_user.id,
                         '–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏, –Ω–∞ —è–∫—É –±—É–¥—É—Ç—å '
                         '–Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –∫–æ—à—Ç–∏.'
                         '–¢–∞–∫–æ–∂ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ –∑ —á–∞—Ç—É üòâ')
        bot.register_next_step_handler(message, set_card)
    else:
        edit_profile(message.from_user.id, 'master')


def set_card(message):
    try:
        update_card(message.from_user.id, base64.standard_b64encode(message.text.encode('UTF-8')))
    except Exception as ex:
        logging.error(f'Could not set credit card. Cause: {ex}. Time: {time.asctime()}')
        return
    bot.send_message(message.from_user.id,
                     '–ù–∞–ø–∏—à—ñ—Ç—å –æ–ø–∏—Å –¥–æ –∞–∫–∫–∞—É–Ω—Ç—É, —â–æ –≤–∏ –≤–º—ñ—î—Ç–µ —ñ —Ç–¥.')
    bot.register_next_step_handler(message, set_acc_details)


def set_acc_details(message):
    try:
        update_acc_details(message.from_user.id, message.text)
    except Exception as ex:
        logging.error(f'Could not update account details. Cause: {ex}. Input: {message.text}. Time: {time.asctime()}')
        return
    user_instance = get_master(message.from_user.id)
    data = buttons.set_placement_buttons(user_instance[0].city_id, 'reg')
    bot.send_message(message.from_user.id, data[0],
                     reply_markup=data[1])


def show_profile(user_id, role):
    keyboard = buttons.empty_template()
    keyboard.add(buttons.back_and_delete())
    keyboard.add(buttons.edit_profile(role))

    if role == 'master':
        try:
            instance = get_master(user_id)
        except Exception as ex:
            logging.error(f'Could not get master data. Cause: {ex}. Time: {time.asctime()}')
            return
        try:
            img = open(data_path + str(user_id) + '\\profile\\profile.jpg', 'rb')
        except Exception as ex:
            logging.error(f'Could not load profile photo. Cause: {ex}. Time: {time.asctime()}')
            img = open(data_path + 'default.jpeg', 'rb')
        bot.send_photo(user_id, photo=img,
                       caption=f"`–Ü–º'—è:` {instance[0].name} \n\n"
                               f"`–¢–µ–ª–µ—Ñ–æ–Ω:` {instance[0].telephone} \n\n"
                       # f"`–ü–æ—à—Ç–∞:` {instance[0].email} \n\n"
                               f"`–ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ:` @{instance[0].username} \n\n"
                               f"`–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:` _*_"
                               f"{(base64.standard_b64decode(instance[0].card)).decode('UTF-8')[-4:]} \n\n"
                               f"`–ù–∞–∑–≤–∞ —Å–∞–ª–æ–Ω—É:` {instance[2]} \n\n"
                               f"`–ú—ñ—Å—Ç–æ:` {instance[3]} \n\n"
                               f"`–û–ø–∏—Å –∞–∫–∫–∞—É–Ω—Ç—É:` {instance[0].details} \n\n"
                               f"`–ú—ñ–π —Ä–µ–π—Ç–∏–Ω–≥:` {instance[1]} \n\n", parse_mode='markdown', reply_markup=keyboard)
        img.close()
    else:
        try:
            instance = get_client(user_id)
        except Exception as ex:
            logging.error(f'Could not get client data. Cause: {ex}. Time: {time.asctime()}')
            return
        bot.send_message(user_id,
                         f"`–Ü–º'—è:` {instance[0].name} \n\n"
                         f"`–¢–µ–ª–µ—Ñ–æ–Ω:` {instance[0].telephone} \n\n"
                         # f"`–ü–æ—à—Ç–∞:` {instance[0].email} \n\n"
                         f"`–ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ:` @{instance[0].username} \n\n"
                         f"`–ú—ñ—Å—Ç–æ:` {instance[2]} \n\n",
                         parse_mode='markdown', reply_markup=keyboard)


def add_certificate(message):
    bot.send_message(message.chat.id, '–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É')
    bot.register_next_step_handler(message, set_certificate_photo)


def set_certificate_photo(message):
    try:
        photo = get_photo(message)
    except Exception as ex:
        logging.error(f'Wrong input. func: set_certificate_photo. Cause: {ex}. Time: {time.asctime()}')
        bot.send_message(message.from_user.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é (–º–æ–∂–ª–∏–≤–æ –í–∏ —ó—ó –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–∞–π–ª—É,"
                                               " –ø–æ—Ç—Ä—ñ–±–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó!)")
        bot.register_next_step_handler(message, set_certificate_photo)
        return
    ran = gen_path(message, 'certificates')
    try:
        image = update_certificate_photo(message, ran, True, photo)
    except Exception as ex:
        logging.error(f'Could not update certificate photo. Cause: {ex}. Time: {time.asctime()}')
        return
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –æ–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ:')
    bot.register_next_step_handler(message=message, image=image, callback=set_certificate_details)


def set_certificate_details(message, image):
    try:
        update_certificate_details(message.from_user.id, image, message.text)
    except Exception as ex:
        logging.error(f'Could not set certificate. Cause: {ex}. Time: {time.asctime()}')
        return
    keyboard = buttons.to_menu()
    bot.send_message(message.from_user.id, '–î–æ–¥–∞–Ω–æ!', reply_markup=keyboard)


def get_photo(message):
    photo_id = message.json['photo'][0]['file_id']
    return bot.download_file(bot.get_file(photo_id).file_path)


def add_sample_service(message):
    if message.text is None:
        bot.send_message(message.from_user.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É, –Ω–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏')
        bot.register_next_step_handler(message, add_sample_service)
        return

    check = check_service(message.text, message.from_user.id)

    if check:
        service_id = create_sample_service(message.from_user.id, message.text)
    else:
        bot.send_message(message.from_user.id, '–¢–∞–∫–∞ –ø–æ—Å–ª—É–≥–∞ –≤–∂–µ —ñ—Å–Ω—É—î,'
                                               ' –ø—Ä–æ–ø–æ–Ω—É—é –∑–º—ñ–Ω—ñ—Ç–∏ –Ω–∞–∑–≤—É!')
        bot.register_next_step_handler(message, add_sample_service)
        return

    bot.send_message(message.from_user.id, '–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏–∫–ª–∞–¥—É —Ä–æ–±–æ—Ç–∏')
    bot.register_next_step_handler(message=message, service_id=service_id, callback=set_service_photo)


def gen_path(message, path):
    while True:
        ran = str(message.from_user.id) + '_' + str(random.randint(1000, 9999))

        if not os.path.exists(data_path + str(message.from_user.id) + '\\' + str(path) + '\\' +
                              str(ran) + '.jpg'):
            break

    return ran


def set_service_photo(message, service_id):
    try:
        photo = get_photo(message)
    except Exception as ex:
        logging.error(f'Could not get service photo. Cause: {ex}. Time: {time.asctime()}')
        bot.send_message(message.from_user.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é (–º–æ–∂–ª–∏–≤–æ –í–∏ —ó—ó –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–∞–π–ª—É,"
                                               " –ø–æ—Ç—Ä—ñ–±–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó!)")
        bot.register_next_step_handler(message, set_service_photo, service_id)
        return
    ran = gen_path(message, 'services')
    try:
        update_samp_serv_photo(message, service_id, ran, photo)
    except Exception as ex:
        logging.error(f'Could not update service photo. Cause: {ex}. Time: {time.asctime()}')
        return

    keyboard = buttons.to_menu()
    bot.send_message(message.from_user.id, '–î–æ–¥–∞–Ω–æ!', reply_markup=keyboard)


def show_certificates(index, end_index, certificates, user_id):
    keyboard = buttons.moving_certificates_buttons(index, end_index, certificates[int(index)].id,
                                                   certificates[int(index)].user_id, user_id)
    try:
        img = open(data_path + str(certificates[int(index)].user_id) + '\\certificates\\' + certificates[
            int(index)].image + '.jpg', 'rb')
    except Exception as ex:
        logging.error(f'Could not load certificate image. Cause: {ex}')
        img = open(data_path + 'default.jpeg', 'rb')
    bot.send_photo(user_id, photo=img,
                   caption=f"`–û–ø–∏—Å:` {certificates[int(index)].description} \n\n", reply_markup=keyboard,
                   parse_mode='markdown')


def show_services(index, end_index, services, user_id):
    keyboard = buttons.moving_services_buttons(index, end_index, services[int(index)].id,
                                               services[int(index)].master_id, user_id)
    try:
        img = open(data_path + str(services[int(index)].master_id) + '\\services\\' + services[int(index)].image
                   + '.jpg', 'rb')
    except Exception as ex:
        logging.error(f'Could not load service image. Cause: {ex}. Time: {time.asctime()}')
        img = open(data_path + 'default.jpeg', 'rb')
    bot.send_photo(user_id, photo=img,
                   caption=f"`–ù–∞–∑–≤–∞:` {services[int(index)].name} \n\n",
                   reply_markup=keyboard,
                   parse_mode='markdown')


def show_masters(index, end_index, masters, user_id):
    keyboard = buttons.moving_masters_buttons(index, end_index,
                                              masters[int(index)].user_id, masters[int(index)].placement_id)
    try:
        img = open(data_path + masters[int(index)].user_id + '\\profile\\profile.jpg', 'rb')
    except Exception as ex:
        logging.error(f'Could not load master image. Cause: {ex}. Time: {time.asctime()}')
        img = open(data_path + 'default.jpeg', 'rb')
    bot.send_photo(user_id, photo=img,
                   caption=f"`–Ü–º'—è:` {masters[int(index)].name} \n\n"
                           f"`–û–ø–∏—Å: ` {masters[int(index)].details} \n\n"
                           f"`–†–µ–π—Ç–∏–Ω–≥: `" + "‚≠êÔ∏è" * int(get_point(masters[int(index)].user_id))
                           + "\n\n", reply_markup=keyboard,
                   parse_mode='markdown')


bot.enable_save_next_step_handlers(delay=2)


# bot.load_next_step_handlers()


def check_start_ud_data():
    cities = get_cities()

    if cities.__len__() < 1:
        os.system('mysqlsh -uroot -fdata.sql')
    else:
        return


if __name__ == '__main__':
    logging.basicConfig(filename='logs.log')
    try:
        check_start_ud_data()
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f'Could not start a bot. Cause: {e}. Time: {time.asctime()}')
